require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"iOSNotification":[function(require,module,exports){
var textLayerOffsetX;

textLayerOffsetX = 92;

exports.showNotification = function(appname, timeago, message, imagepath) {
  var appNameTextLayer, barLayer, iconLayer, messageTextLayer, notificationLayer, timeagoTextLayer;
  notificationLayer = new Layer({
    width: Framer.Device.screen.width,
    height: 136,
    backgroundColor: "#000",
    opacity: 0.9
  });
  notificationLayer.y = -notificationLayer.height;
  barLayer = new Layer({
    width: 74,
    height: 10,
    backgroundColor: "#ccc",
    opacity: 0.5,
    borderRadius: 10,
    y: notificationLayer.height - 20,
    superLayer: notificationLayer
  });
  barLayer.x = (notificationLayer.width / 2) - (barLayer.width / 2);
  iconLayer = new Layer({
    height: 40,
    width: 40,
    x: 30,
    y: 7,
    image: imagepath,
    superLayer: notificationLayer
  });
  appNameTextLayer = new Layer({
    x: textLayerOffsetX,
    height: 30,
    y: 11,
    superLayer: notificationLayer,
    backgroundColor: null
  });
  appNameTextLayer.html = "<span style='font-size:20pt;color:#fff;font-weight:bold;'>" + appname + "</span>";
  appNameTextLayer.width = Utils.textSize(appNameTextLayer.html).width;
  timeagoTextLayer = new Layer({
    height: 30,
    y: 11,
    x: (appNameTextLayer.x + Utils.textSize(appNameTextLayer.html).width) + 14,
    superLayer: notificationLayer,
    backgroundColor: null
  });
  timeagoTextLayer.html = "<span style='font-size:14pt;color:#fff'>" + timeago + "</span>";
  timeagoTextLayer.width = Utils.textSize(timeagoTextLayer.html).width;
  messageTextLayer = new Layer({
    x: textLayerOffsetX,
    y: appNameTextLayer.height + 10,
    width: Framer.Device.screen.width - 120,
    height: 100,
    superLayer: notificationLayer,
    backgroundColor: null
  });
  messageTextLayer.html = "<span style='font-size:18pt;color:#fff;'>" + message + "</span>";
  notificationLayer.states.add({
    hide: {
      y: notificationLayer.y
    },
    show: {
      y: 0
    }
  });
  notificationLayer.states.animationOptions = {
    time: 0.5,
    curve: "ease-in"
  };
  notificationLayer.states["switch"]("show");
  return Utils.delay(6, function() {
    return notificationLayer.states["switch"]("hide");
  });
};



},{}]},{},[])
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCIvVXNlcnMvZGxlaW5lcnVkL0dvb2dsZSBEcml2ZS9Qcm9kdWt0aW9uZXIvRnJhbWVyL2lPU05vdGlmaWNhdGlvbi1tb2R1bGUtZXhhbXBsZS5mcmFtZXIvbW9kdWxlcy9pT1NOb3RpZmljYXRpb24uY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FDQUEsSUFBQSxnQkFBQTs7QUFBQSxnQkFBQSxHQUFtQixFQUFuQixDQUFBOztBQUFBLE9BRU8sQ0FBQyxnQkFBUixHQUEyQixTQUFFLE9BQUYsRUFBVyxPQUFYLEVBQW9CLE9BQXBCLEVBQTZCLFNBQTdCLEdBQUE7QUFHMUIsTUFBQSw0RkFBQTtBQUFBLEVBQUEsaUJBQUEsR0FBd0IsSUFBQSxLQUFBLENBQU07QUFBQSxJQUFBLEtBQUEsRUFBTSxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxLQUEzQjtBQUFBLElBQWtDLE1BQUEsRUFBTyxHQUF6QztBQUFBLElBQThDLGVBQUEsRUFBZ0IsTUFBOUQ7QUFBQSxJQUFzRSxPQUFBLEVBQVEsR0FBOUU7R0FBTixDQUF4QixDQUFBO0FBQUEsRUFDQSxpQkFBaUIsQ0FBQyxDQUFsQixHQUFzQixDQUFBLGlCQUFrQixDQUFDLE1BRHpDLENBQUE7QUFBQSxFQUVBLFFBQUEsR0FBZSxJQUFBLEtBQUEsQ0FBTTtBQUFBLElBQUEsS0FBQSxFQUFPLEVBQVA7QUFBQSxJQUFXLE1BQUEsRUFBTyxFQUFsQjtBQUFBLElBQXNCLGVBQUEsRUFBZ0IsTUFBdEM7QUFBQSxJQUE4QyxPQUFBLEVBQVEsR0FBdEQ7QUFBQSxJQUEyRCxZQUFBLEVBQWEsRUFBeEU7QUFBQSxJQUE0RSxDQUFBLEVBQUUsaUJBQWlCLENBQUMsTUFBbEIsR0FBeUIsRUFBdkc7QUFBQSxJQUEyRyxVQUFBLEVBQVcsaUJBQXRIO0dBQU4sQ0FGZixDQUFBO0FBQUEsRUFH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Q0FBeEIsQ0FBZ0MsTUFBaEMsQ0E3QkEsQ0FBQTtTQWlDQSxLQUFLLENBQUMsS0FBTixDQUFZLENBQVosRUFBZSxTQUFBLEdBQUE7V0FDZCxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsUUFBRCxDQUF4QixDQUFnQyxNQUFoQyxFQURjO0VBQUEsQ0FBZixFQXBDMEI7QUFBQSxDQUYzQixDQUFBIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtpZighdSYmYSlyZXR1cm4gYShvLCEwKTtpZihpKXJldHVybiBpKG8sITApO3ZhciBmPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrbytcIidcIik7dGhyb3cgZi5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGZ9dmFyIGw9bltvXT17ZXhwb3J0czp7fX07dFtvXVswXS5jYWxsKGwuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgbj10W29dWzFdW2VdO3JldHVybiBzKG4/bjplKX0sbCxsLmV4cG9ydHMsZSx0LG4scil9cmV0dXJuIG5bb10uZXhwb3J0c312YXIgaT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2Zvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKXMocltvXSk7cmV0dXJuIHN9KSIsInRleHRMYXllck9mZnNldFggPSA5MlxuXG5leHBvcnRzLnNob3dOb3RpZmljYXRpb24gPSAoIGFwcG5hbWUsIHRpbWVhZ28sIG1lc3NhZ2UsIGltYWdlcGF0aCApIC0+XG5cblx0I1NldHVwIGFsbCB0aGUgYXdlc29tZSBsYXllcnNcblx0bm90aWZpY2F0aW9uTGF5ZXIgPSBuZXcgTGF5ZXIgd2lkdGg6RnJhbWVyLkRldmljZS5zY3JlZW4ud2lkdGgsIGhlaWdodDoxMzYsIGJhY2tncm91bmRDb2xvcjpcIiMwMDBcIiwgb3BhY2l0eTowLjlcblx0bm90aWZpY2F0aW9uTGF5ZXIueSA9IC1ub3RpZmljYXRpb25MYXllci5oZWlnaHRcblx0YmFyTGF5ZXIgPSBuZXcgTGF5ZXIgd2lkdGg6IDc0LCBoZWlnaHQ6MTAsIGJhY2tncm91bmRDb2xvcjpcIiNjY2NcIiwgb3BhY2l0eTowLjUsIGJvcmRlclJhZGl1czoxMCwgeTpub3RpZmljYXRpb25MYXllci5oZWlnaHQtMjAsIHN1cGVyTGF5ZXI6bm90aWZpY2F0aW9uTGF5ZXJcblx0YmFyTGF5ZXIueCA9IChub3RpZmljYXRpb25MYXllci53aWR0aC8yKS0oYmFyTGF5ZXIud2lkdGgvMilcblxuXHRpY29uTGF5ZXIgPSBuZXcgTGF5ZXIgaGVpZ2h0OjQwLCB3aWR0aDo0MCwgeDozMCwgeTo3LCBpbWFnZTppbWFnZXBhdGgsIHN1cGVyTGF5ZXI6bm90aWZpY2F0aW9uTGF5ZXJcblxuXHRhcHBOYW1lVGV4dExheWVyID0gbmV3IExheWVyIHg6dGV4dExheWVyT2Zmc2V0WCwgaGVpZ2h0OjMwLCB5OjExLCBzdXBlckxheWVyOm5vdGlmaWNhdGlvbkxheWVyLCBiYWNrZ3JvdW5kQ29sb3I6bnVsbFxuXHRhcHBOYW1lVGV4dExheWVyLmh0bWwgPSBcIjxzcGFuIHN0eWxlPSdmb250LXNpemU6MjBwdDtjb2xvcjojZmZmO2ZvbnQtd2VpZ2h0OmJvbGQ7Jz4je2FwcG5hbWV9PC9zcGFuPlwiXG5cdGFwcE5hbWVUZXh0TGF5ZXIud2lkdGggPSBVdGlscy50ZXh0U2l6ZShhcHBOYW1lVGV4dExheWVyLmh0bWwpLndpZHRoXG5cblx0dGltZWFnb1RleHRMYXllciA9IG5ldyBMYXllciBoZWlnaHQ6MzAsIHk6MTEsIHg6KGFwcE5hbWVUZXh0TGF5ZXIueCArIFV0aWxzLnRleHRTaXplKGFwcE5hbWVUZXh0TGF5ZXIuaHRtbCkud2lkdGgpKzE0ICwgc3VwZXJMYXllcjpub3RpZmljYXRpb25MYXllciwgYmFja2dyb3VuZENvbG9yOm51bGxcblx0dGltZWFnb1RleHRMYXllci5odG1sID0gXCI8c3BhbiBzdHlsZT0nZm9udC1zaXplOjE0cHQ7Y29sb3I6I2ZmZic+I3t0aW1lYWdvfTwvc3Bhbj5cIlxuXHR0aW1lYWdvVGV4dExheWVyLndpZHRoID0gVXRpbHMudGV4dFNpemUodGltZWFnb1RleHRMYXllci5odG1sKS53aWR0aFxuXG5cdG1lc3NhZ2VUZXh0TGF5ZXIgPSBuZXcgTGF5ZXIoe3g6dGV4dExheWVyT2Zmc2V0WCwgeTphcHBOYW1lVGV4dExheWVyLmhlaWdodCsxMCwgd2lkdGg6RnJhbWVyLkRldmljZS5zY3JlZW4ud2lkdGgtMTIwLCBoZWlnaHQ6MTAwLCBzdXBlckxheWVyOm5vdGlmaWNhdGlvbkxheWVyLCBiYWNrZ3JvdW5kQ29sb3I6bnVsbH0pXG5cdG1lc3NhZ2VUZXh0TGF5ZXIuaHRtbCA9IFwiPHNwYW4gc3R5bGU9J2ZvbnQtc2l6ZToxOHB0O2NvbG9yOiNmZmY7Jz4je21lc3NhZ2V9PC9zcGFuPlwiXG5cdCNTZXR1cCBhbGwgdGhlIGF3ZXNvbWUgbGF5ZXJzXG5cblxuXHQjU2V0dXAgYW5kIHNob3cgdGhlIG5vdGlmaWNhdGlvblxuXHRub3RpZmljYXRpb25MYXllci5zdGF0ZXMuYWRkKHtcblx0XHRoaWRlOiB7eTpub3RpZmljYXRpb25MYXllci55fSxcblx0XHRzaG93OiB7eTowfSxcblx0fSlcblx0bm90aWZpY2F0aW9uTGF5ZXIuc3RhdGVzLmFuaW1hdGlvbk9wdGlvbnMgPSB7XG4gICAgdGltZTowLjUsXG5cdFx0Y3VydmU6IFwiZWFzZS1pblwiXG5cdH1cblx0bm90aWZpY2F0aW9uTGF5ZXIuc3RhdGVzLnN3aXRjaChcInNob3dcIilcblx0I1NldHVwIGFuZCBzaG93IHRoZSBub3RpZmljYXRpb25cblxuXHQjQW5kIGhpZGUgdGhlIG5vdGlmaWNhdGlvbiBhZ2FpblxuXHRVdGlscy5kZWxheSA2LCAtPlxuXHRcdG5vdGlmaWNhdGlvbkxheWVyLnN0YXRlcy5zd2l0Y2goXCJoaWRlXCIpXG5cdCNBbmQgaGlkZSB0aGUgbm90aWZpY2F0aW9uIGFnYWluXG4iXX0=
